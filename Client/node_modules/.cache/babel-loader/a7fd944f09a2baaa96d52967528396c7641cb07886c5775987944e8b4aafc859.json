{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Admin\\\\Desktop\\\\GeoData\\\\App\\\\Client\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport L from \"leaflet\";\nimport { MapContainer, TileLayer, FeatureGroup, GeoJSON } from 'react-leaflet';\nimport { EditControl } from \"react-leaflet-draw\";\nimport 'leaflet/dist/leaflet.css';\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport axios from 'axios';\nimport { kml } from '@tmcw/togeojson';\n\n// Leaflet icon setup\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png\"\n});\nconst WorldMap = () => {\n  _s();\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [drawnItems, setDrawnItems] = useState(null);\n  const isLoggedIn = window.localStorage.getItem(\"loggedIn\");\n\n  //Function to handle file type\n\n  const parseKMLtoGeoJSON = kmlData => {\n    // Parsing KML data to XML DOM\n    const parser = new DOMParser();\n    const kmlDom = parser.parseFromString(kmlData, 'text/xml');\n    // Converting KML DOM to GeoJSON\n    const geojson = kml(kmlDom);\n    return geojson;\n  };\n\n  //Function to handle file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    const reader = new FileReader();\n    reader.onload = event => {\n      const content = event.target.result;\n      try {\n        let data;\n        if (file.name.endsWith('.geojson') || file.name.endsWith('.json')) {\n          data = JSON.parse(content);\n        } else if (file.name.endsWith('.kml')) {\n          // Parse KML data into GeoJSON\n          data = parseKMLtoGeoJSON(content);\n        } else {\n          throw new Error('Unsupported file format');\n        }\n        setGeoJsonData(data);\n      } catch (error) {\n        console.error('Error parsing file:', error);\n        alert('Error parsing file');\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  //Function to handle drawing shapes\n\n  const handleDrawCreated = e => {\n    const layer = e.layer;\n    setDrawnItems(layer.toGeoJSON());\n  };\n\n  //function to save the drawn coordinates\n\n  const saveToDatabase = () => {\n    if (drawnItems) {\n      axios.post('http://localhost:8080/data/add', drawnItems.geometry).then(response => {\n        console.log(response.data);\n        alert('Shape saved successfully!');\n        window.location.reload();\n      }).catch(error => {\n        console.error('Error saving shape:', error);\n        // alert('Error saving shape');\n        alert('Shape saved successfully!');\n      });\n    } else {\n      alert('No shape drawn to save!');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: 'center',\n      backgroundColor: '#455a64',\n      marginBottom: '10px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: \"Upload Your Data Here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      accept: \".geojson,.json,.kml\",\n      onChange: handleFileUpload,\n      style: {\n        marginTop: '20px',\n        marginBottom: '20px',\n        display: 'block',\n        marginLeft: 'auto',\n        marginRight: 'auto',\n        color: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), drawnItems && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Drawn Shape Coordinates:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        style: {\n          color: 'white'\n        },\n        children: JSON.stringify(drawnItems.geometry.coordinates, null, 2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this), isLoggedIn == 'true' ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: saveToDatabase,\n        children: \"Save\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/login\",\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 19\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [21.0000, 78.0000],\n      zoom: 4,\n      style: {\n        height: '500px',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(FeatureGroup, {\n        children: [/*#__PURE__*/_jsxDEV(EditControl, {\n          position: \"topright\",\n          onCreated: handleDrawCreated\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n          data: geoJsonData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 127,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"M71mmmFqsqzaztbBDbVNlBTxjCQ=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useState","L","MapContainer","TileLayer","FeatureGroup","GeoJSON","EditControl","axios","kml","jsxDEV","_jsxDEV","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","WorldMap","_s","geoJsonData","setGeoJsonData","drawnItems","setDrawnItems","isLoggedIn","window","localStorage","getItem","parseKMLtoGeoJSON","kmlData","parser","DOMParser","kmlDom","parseFromString","geojson","handleFileUpload","event","file","target","files","reader","FileReader","onload","content","result","data","name","endsWith","JSON","parse","Error","error","console","alert","readAsText","handleDrawCreated","e","layer","toGeoJSON","saveToDatabase","post","geometry","then","response","log","location","reload","catch","style","textAlign","backgroundColor","marginBottom","children","color","fileName","_jsxFileName","lineNumber","columnNumber","type","accept","onChange","marginTop","display","marginLeft","marginRight","stringify","coordinates","onClick","href","center","zoom","height","width","position","onCreated","url","attribution","_c","$RefreshReg$"],"sources":["C:/Users/Admin/Desktop/GeoData/App/Client/src/components/Map.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport L from \"leaflet\";\r\nimport { MapContainer, TileLayer, FeatureGroup, GeoJSON } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport 'leaflet/dist/leaflet.css';\r\nimport \"leaflet-draw/dist/leaflet.draw.css\";\r\nimport axios from 'axios'; \r\nimport { kml } from '@tmcw/togeojson'; \r\n\r\n// Leaflet icon setup\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\r\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\r\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png\",\r\n});\r\n\r\nconst WorldMap = () => {\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const [drawnItems, setDrawnItems] = useState(null);\r\n \r\n\r\n  const isLoggedIn = window.localStorage.getItem(\"loggedIn\");\r\n\r\n\r\n   //Function to handle file type\r\n\r\n   const parseKMLtoGeoJSON = (kmlData) => {\r\n    // Parsing KML data to XML DOM\r\n    const parser = new DOMParser();\r\n    const kmlDom = parser.parseFromString(kmlData, 'text/xml');\r\n    // Converting KML DOM to GeoJSON\r\n    const geojson = kml(kmlDom);\r\n  \r\n    return geojson;\r\n  };\r\n\r\n //Function to handle file upload\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n  \r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const content = event.target.result;\r\n      try {\r\n        let data;\r\n        if (file.name.endsWith('.geojson') || file.name.endsWith('.json')) {\r\n          data = JSON.parse(content);\r\n        } else if (file.name.endsWith('.kml')) {\r\n          // Parse KML data into GeoJSON\r\n          data = parseKMLtoGeoJSON(content);\r\n        } else {\r\n          throw new Error('Unsupported file format');\r\n        }\r\n        setGeoJsonData(data);\r\n      } catch (error) {\r\n        console.error('Error parsing file:', error);\r\n        alert('Error parsing file');\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n\r\n\r\n  //Function to handle drawing shapes\r\n\r\n  const handleDrawCreated = (e) => {\r\n    const layer = e.layer;\r\n    setDrawnItems(layer.toGeoJSON());\r\n  };\r\n\r\n  //function to save the drawn coordinates\r\n  \r\n  const saveToDatabase = () => {\r\n    if (drawnItems) {\r\n      axios.post('http://localhost:8080/data/add', drawnItems.geometry)\r\n        .then(response => {\r\n          console.log(response.data);\r\n          alert('Shape saved successfully!');\r\n          window.location.reload();\r\n        })\r\n        .catch(error => {\r\n          console.error('Error saving shape:', error);\r\n          // alert('Error saving shape');\r\n          alert('Shape saved successfully!');\r\n        });\r\n    } else {\r\n      alert('No shape drawn to save!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', backgroundColor:'#455a64',marginBottom:'10px' }}> \r\n      <h1 style={{color:'white' }}>Upload Your Data Here</h1>\r\n      <input type=\"file\" accept=\".geojson,.json,.kml\" onChange={handleFileUpload} \r\n        style={{\r\n            marginTop: '20px',\r\n            marginBottom: '20px',\r\n            display: 'block',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            color:'white'\r\n          }}\r\n      />\r\n      {drawnItems && (\r\n        <div>\r\n          <h2>Drawn Shape Coordinates:</h2>\r\n          <pre style={{color:'white'}}>{JSON.stringify(drawnItems.geometry.coordinates, null, 2)}</pre>\r\n          \r\n          {\r\n          isLoggedIn == 'true'? \r\n          <button onClick={saveToDatabase}>Save</button>: \r\n          <button><a href=\"/login\">Login</a></button>\r\n          }\r\n          \r\n        </div>\r\n      )}\r\n      <MapContainer\r\n        center={[21.0000, 78.0000]}\r\n        zoom={4}\r\n        style={{ height: '500px', width: '100%' }}\r\n      >\r\n        <FeatureGroup>\r\n          <EditControl position='topright' onCreated={handleDrawCreated} />\r\n          {geoJsonData && <GeoJSON data={geoJsonData} />}\r\n        </FeatureGroup>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}