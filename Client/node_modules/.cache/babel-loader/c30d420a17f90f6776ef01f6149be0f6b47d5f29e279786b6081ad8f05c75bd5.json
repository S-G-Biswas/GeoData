{"ast":null,"code":"import React,{useState}from'react';import L from\"leaflet\";import{MapContainer,TileLayer,FeatureGroup,GeoJSON}from'react-leaflet';import{EditControl}from\"react-leaflet-draw\";import'leaflet/dist/leaflet.css';import\"leaflet-draw/dist/leaflet.draw.css\";import axios from'axios';import{kml}from'@tmcw/togeojson';// Leaflet icon setup\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";delete L.Icon.Default.prototype._getIconUrl;L.Icon.Default.mergeOptions({iconRetinaUrl:\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",iconUrl:\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",shadowUrl:\"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png\"});const WorldMap=()=>{const[geoJsonData,setGeoJsonData]=useState(null);const[drawnItems,setDrawnItems]=useState(null);const isLoggedIn=window.localStorage.getItem(\"loggedIn\");//Function to handle file type\nconst parseKMLtoGeoJSON=kmlData=>{// Parsing KML data to XML DOM\nconst parser=new DOMParser();const kmlDom=parser.parseFromString(kmlData,'text/xml');// Converting KML DOM to GeoJSON\nconst geojson=kml(kmlDom);return geojson;};//Function to handle file upload\nconst handleFileUpload=event=>{const file=event.target.files[0];if(!file)return;const reader=new FileReader();reader.onload=event=>{const content=event.target.result;try{let data;if(file.name.endsWith('.geojson')||file.name.endsWith('.json')){data=JSON.parse(content);}else if(file.name.endsWith('.kml')){// Parse KML data into GeoJSON\ndata=parseKMLtoGeoJSON(content);}else{throw new Error('Unsupported file format');}setGeoJsonData(data);}catch(error){console.error('Error parsing file:',error);alert('Error parsing file');}};reader.readAsText(file);};//Function to handle drawing shapes\nconst handleDrawCreated=e=>{const layer=e.layer;setDrawnItems(layer.toGeoJSON());};//function to save the drawn coordinates\nconst saveToDatabase=()=>{if(drawnItems){axios.post('http://localhost:8080/data/add',drawnItems.geometry).then(response=>{console.log(response.data);alert('Shape saved successfully!');window.location.reload();}).catch(error=>{console.error('Error saving shape:',error);// alert('Error saving shape');\nalert('Shape saved successfully!');});}else{alert('No shape drawn to save!');}};return/*#__PURE__*/_jsxs(\"div\",{style:{textAlign:'center',backgroundColor:'#455a64',marginBottom:'10px'},children:[/*#__PURE__*/_jsx(\"h1\",{style:{color:'white'},children:\"Upload Your Data Here\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".geojson,.json,.kml\",onChange:handleFileUpload,style:{marginTop:'20px',marginBottom:'20px',display:'block',marginLeft:'auto',marginRight:'auto',color:'white'}}),drawnItems&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Drawn Shape Coordinates:\"}),/*#__PURE__*/_jsx(\"pre\",{style:{color:'white'},children:JSON.stringify(drawnItems.geometry.coordinates,null,2)}),isLoggedIn=='true'?/*#__PURE__*/_jsx(\"button\",{onClick:saveToDatabase,children:\"Save\"}):/*#__PURE__*/_jsx(\"button\",{children:/*#__PURE__*/_jsx(\"a\",{href:\"/login\",children:\"Login\"})})]}),/*#__PURE__*/_jsxs(MapContainer,{center:[21.0000,78.0000],zoom:4,style:{height:'500px',width:'100%'},children:[/*#__PURE__*/_jsxs(FeatureGroup,{children:[/*#__PURE__*/_jsx(EditControl,{position:\"topright\",onCreated:handleDrawCreated}),geoJsonData&&/*#__PURE__*/_jsx(GeoJSON,{data:geoJsonData})]}),/*#__PURE__*/_jsx(TileLayer,{url:\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",attribution:\"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"})]})]});};export default WorldMap;","map":{"version":3,"names":["React","useState","L","MapContainer","TileLayer","FeatureGroup","GeoJSON","EditControl","axios","kml","jsx","_jsx","jsxs","_jsxs","Icon","Default","prototype","_getIconUrl","mergeOptions","iconRetinaUrl","iconUrl","shadowUrl","WorldMap","geoJsonData","setGeoJsonData","drawnItems","setDrawnItems","isLoggedIn","window","localStorage","getItem","parseKMLtoGeoJSON","kmlData","parser","DOMParser","kmlDom","parseFromString","geojson","handleFileUpload","event","file","target","files","reader","FileReader","onload","content","result","data","name","endsWith","JSON","parse","Error","error","console","alert","readAsText","handleDrawCreated","e","layer","toGeoJSON","saveToDatabase","post","geometry","then","response","log","location","reload","catch","style","textAlign","backgroundColor","marginBottom","children","color","type","accept","onChange","marginTop","display","marginLeft","marginRight","stringify","coordinates","onClick","href","center","zoom","height","width","position","onCreated","url","attribution"],"sources":["C:/Users/Admin/Desktop/GeoData/App/Client/src/components/Map.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport L from \"leaflet\";\r\nimport { MapContainer, TileLayer, FeatureGroup, GeoJSON } from 'react-leaflet';\r\nimport { EditControl } from \"react-leaflet-draw\";\r\nimport 'leaflet/dist/leaflet.css';\r\nimport \"leaflet-draw/dist/leaflet.draw.css\";\r\nimport axios from 'axios'; \r\nimport { kml } from '@tmcw/togeojson'; \r\n\r\n// Leaflet icon setup\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\nL.Icon.Default.mergeOptions({\r\n  iconRetinaUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\r\n  iconUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-icon.png\",\r\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.3.1/images/marker-shadow.png\",\r\n});\r\n\r\nconst WorldMap = () => {\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const [drawnItems, setDrawnItems] = useState(null);\r\n \r\n\r\n  const isLoggedIn = window.localStorage.getItem(\"loggedIn\");\r\n\r\n\r\n   //Function to handle file type\r\n\r\n   const parseKMLtoGeoJSON = (kmlData) => {\r\n    // Parsing KML data to XML DOM\r\n    const parser = new DOMParser();\r\n    const kmlDom = parser.parseFromString(kmlData, 'text/xml');\r\n    // Converting KML DOM to GeoJSON\r\n    const geojson = kml(kmlDom);\r\n  \r\n    return geojson;\r\n  };\r\n\r\n //Function to handle file upload\r\n  const handleFileUpload = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n  \r\n    const reader = new FileReader();\r\n    reader.onload = (event) => {\r\n      const content = event.target.result;\r\n      try {\r\n        let data;\r\n        if (file.name.endsWith('.geojson') || file.name.endsWith('.json')) {\r\n          data = JSON.parse(content);\r\n        } else if (file.name.endsWith('.kml')) {\r\n          // Parse KML data into GeoJSON\r\n          data = parseKMLtoGeoJSON(content);\r\n        } else {\r\n          throw new Error('Unsupported file format');\r\n        }\r\n        setGeoJsonData(data);\r\n      } catch (error) {\r\n        console.error('Error parsing file:', error);\r\n        alert('Error parsing file');\r\n      }\r\n    };\r\n    reader.readAsText(file);\r\n  };\r\n\r\n\r\n\r\n  //Function to handle drawing shapes\r\n\r\n  const handleDrawCreated = (e) => {\r\n    const layer = e.layer;\r\n    setDrawnItems(layer.toGeoJSON());\r\n  };\r\n\r\n  //function to save the drawn coordinates\r\n  \r\n  const saveToDatabase = () => {\r\n    if (drawnItems) {\r\n      axios.post('http://localhost:8080/data/add', drawnItems.geometry)\r\n        .then(response => {\r\n          console.log(response.data);\r\n          alert('Shape saved successfully!');\r\n          window.location.reload();\r\n        })\r\n        .catch(error => {\r\n          console.error('Error saving shape:', error);\r\n          // alert('Error saving shape');\r\n          alert('Shape saved successfully!');\r\n        });\r\n    } else {\r\n      alert('No shape drawn to save!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ textAlign: 'center', backgroundColor:'#455a64',marginBottom:'10px' }}> \r\n      <h1 style={{color:'white' }}>Upload Your Data Here</h1>\r\n      <input type=\"file\" accept=\".geojson,.json,.kml\" onChange={handleFileUpload} \r\n        style={{\r\n            marginTop: '20px',\r\n            marginBottom: '20px',\r\n            display: 'block',\r\n            marginLeft: 'auto',\r\n            marginRight: 'auto',\r\n            color:'white'\r\n          }}\r\n      />\r\n      {drawnItems && (\r\n        <div>\r\n          <h2>Drawn Shape Coordinates:</h2>\r\n          <pre style={{color:'white'}}>{JSON.stringify(drawnItems.geometry.coordinates, null, 2)}</pre>\r\n          \r\n          {\r\n          isLoggedIn == 'true'? \r\n          <button onClick={saveToDatabase}>Save</button>: \r\n          <button><a href=\"/login\">Login</a></button>\r\n          }\r\n          \r\n        </div>\r\n      )}\r\n      <MapContainer\r\n        center={[21.0000, 78.0000]}\r\n        zoom={4}\r\n        style={{ height: '500px', width: '100%' }}\r\n      >\r\n        <FeatureGroup>\r\n          <EditControl position='topright' onCreated={handleDrawCreated} />\r\n          {geoJsonData && <GeoJSON data={geoJsonData} />}\r\n        </FeatureGroup>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,CAAAC,CAAC,KAAM,SAAS,CACvB,OAASC,YAAY,CAAEC,SAAS,CAAEC,YAAY,CAAEC,OAAO,KAAQ,eAAe,CAC9E,OAASC,WAAW,KAAQ,oBAAoB,CAChD,MAAO,0BAA0B,CACjC,MAAO,oCAAoC,CAC3C,MAAO,CAAAC,KAAK,KAAM,OAAO,CACzB,OAASC,GAAG,KAAQ,iBAAiB,CAErC;AAAA,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBACA,MAAO,CAAAX,CAAC,CAACY,IAAI,CAACC,OAAO,CAACC,SAAS,CAACC,WAAW,CAC3Cf,CAAC,CAACY,IAAI,CAACC,OAAO,CAACG,YAAY,CAAC,CAC1BC,aAAa,CAAE,6EAA6E,CAC5FC,OAAO,CAAE,6EAA6E,CACtFC,SAAS,CAAE,+EACb,CAAC,CAAC,CAEF,KAAM,CAAAC,QAAQ,CAAGA,CAAA,GAAM,CACrB,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGvB,QAAQ,CAAC,IAAI,CAAC,CACpD,KAAM,CAACwB,UAAU,CAAEC,aAAa,CAAC,CAAGzB,QAAQ,CAAC,IAAI,CAAC,CAGlD,KAAM,CAAA0B,UAAU,CAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAGzD;AAEA,KAAM,CAAAC,iBAAiB,CAAIC,OAAO,EAAK,CACtC;AACA,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAC,SAAS,CAAC,CAAC,CAC9B,KAAM,CAAAC,MAAM,CAAGF,MAAM,CAACG,eAAe,CAACJ,OAAO,CAAE,UAAU,CAAC,CAC1D;AACA,KAAM,CAAAK,OAAO,CAAG5B,GAAG,CAAC0B,MAAM,CAAC,CAE3B,MAAO,CAAAE,OAAO,CAChB,CAAC,CAEF;AACC,KAAM,CAAAC,gBAAgB,CAAIC,KAAK,EAAK,CAClC,KAAM,CAAAC,IAAI,CAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC,CAClC,GAAI,CAACF,IAAI,CAAE,OAEX,KAAM,CAAAG,MAAM,CAAG,GAAI,CAAAC,UAAU,CAAC,CAAC,CAC/BD,MAAM,CAACE,MAAM,CAAIN,KAAK,EAAK,CACzB,KAAM,CAAAO,OAAO,CAAGP,KAAK,CAACE,MAAM,CAACM,MAAM,CACnC,GAAI,CACF,GAAI,CAAAC,IAAI,CACR,GAAIR,IAAI,CAACS,IAAI,CAACC,QAAQ,CAAC,UAAU,CAAC,EAAIV,IAAI,CAACS,IAAI,CAACC,QAAQ,CAAC,OAAO,CAAC,CAAE,CACjEF,IAAI,CAAGG,IAAI,CAACC,KAAK,CAACN,OAAO,CAAC,CAC5B,CAAC,IAAM,IAAIN,IAAI,CAACS,IAAI,CAACC,QAAQ,CAAC,MAAM,CAAC,CAAE,CACrC;AACAF,IAAI,CAAGjB,iBAAiB,CAACe,OAAO,CAAC,CACnC,CAAC,IAAM,CACL,KAAM,IAAI,CAAAO,KAAK,CAAC,yBAAyB,CAAC,CAC5C,CACA7B,cAAc,CAACwB,IAAI,CAAC,CACtB,CAAE,MAAOM,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3CE,KAAK,CAAC,oBAAoB,CAAC,CAC7B,CACF,CAAC,CACDb,MAAM,CAACc,UAAU,CAACjB,IAAI,CAAC,CACzB,CAAC,CAID;AAEA,KAAM,CAAAkB,iBAAiB,CAAIC,CAAC,EAAK,CAC/B,KAAM,CAAAC,KAAK,CAAGD,CAAC,CAACC,KAAK,CACrBlC,aAAa,CAACkC,KAAK,CAACC,SAAS,CAAC,CAAC,CAAC,CAClC,CAAC,CAED;AAEA,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B,GAAIrC,UAAU,CAAE,CACdjB,KAAK,CAACuD,IAAI,CAAC,gCAAgC,CAAEtC,UAAU,CAACuC,QAAQ,CAAC,CAC9DC,IAAI,CAACC,QAAQ,EAAI,CAChBX,OAAO,CAACY,GAAG,CAACD,QAAQ,CAAClB,IAAI,CAAC,CAC1BQ,KAAK,CAAC,2BAA2B,CAAC,CAClC5B,MAAM,CAACwC,QAAQ,CAACC,MAAM,CAAC,CAAC,CAC1B,CAAC,CAAC,CACDC,KAAK,CAAChB,KAAK,EAAI,CACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,CAAEA,KAAK,CAAC,CAC3C;AACAE,KAAK,CAAC,2BAA2B,CAAC,CACpC,CAAC,CAAC,CACN,CAAC,IAAM,CACLA,KAAK,CAAC,yBAAyB,CAAC,CAClC,CACF,CAAC,CAED,mBACE3C,KAAA,QAAK0D,KAAK,CAAE,CAAEC,SAAS,CAAE,QAAQ,CAAEC,eAAe,CAAC,SAAS,CAACC,YAAY,CAAC,MAAO,CAAE,CAAAC,QAAA,eACjFhE,IAAA,OAAI4D,KAAK,CAAE,CAACK,KAAK,CAAC,OAAQ,CAAE,CAAAD,QAAA,CAAC,uBAAqB,CAAI,CAAC,cACvDhE,IAAA,UAAOkE,IAAI,CAAC,MAAM,CAACC,MAAM,CAAC,qBAAqB,CAACC,QAAQ,CAAEzC,gBAAiB,CACzEiC,KAAK,CAAE,CACHS,SAAS,CAAE,MAAM,CACjBN,YAAY,CAAE,MAAM,CACpBO,OAAO,CAAE,OAAO,CAChBC,UAAU,CAAE,MAAM,CAClBC,WAAW,CAAE,MAAM,CACnBP,KAAK,CAAC,OACR,CAAE,CACL,CAAC,CACDnD,UAAU,eACTZ,KAAA,QAAA8D,QAAA,eACEhE,IAAA,OAAAgE,QAAA,CAAI,0BAAwB,CAAI,CAAC,cACjChE,IAAA,QAAK4D,KAAK,CAAE,CAACK,KAAK,CAAC,OAAO,CAAE,CAAAD,QAAA,CAAExB,IAAI,CAACiC,SAAS,CAAC3D,UAAU,CAACuC,QAAQ,CAACqB,WAAW,CAAE,IAAI,CAAE,CAAC,CAAC,CAAM,CAAC,CAG7F1D,UAAU,EAAI,MAAM,cACpBhB,IAAA,WAAQ2E,OAAO,CAAExB,cAAe,CAAAa,QAAA,CAAC,MAAI,CAAQ,CAAC,cAC9ChE,IAAA,WAAAgE,QAAA,cAAQhE,IAAA,MAAG4E,IAAI,CAAC,QAAQ,CAAAZ,QAAA,CAAC,OAAK,CAAG,CAAC,CAAQ,CAAC,EAGxC,CACN,cACD9D,KAAA,CAACV,YAAY,EACXqF,MAAM,CAAE,CAAC,OAAO,CAAE,OAAO,CAAE,CAC3BC,IAAI,CAAE,CAAE,CACRlB,KAAK,CAAE,CAAEmB,MAAM,CAAE,OAAO,CAAEC,KAAK,CAAE,MAAO,CAAE,CAAAhB,QAAA,eAE1C9D,KAAA,CAACR,YAAY,EAAAsE,QAAA,eACXhE,IAAA,CAACJ,WAAW,EAACqF,QAAQ,CAAC,UAAU,CAACC,SAAS,CAAEnC,iBAAkB,CAAE,CAAC,CAChEnC,WAAW,eAAIZ,IAAA,CAACL,OAAO,EAAC0C,IAAI,CAAEzB,WAAY,CAAE,CAAC,EAClC,CAAC,cACfZ,IAAA,CAACP,SAAS,EACR0F,GAAG,CAAC,oDAAoD,CACxDC,WAAW,CAAC,yFAAyF,CACtG,CAAC,EACU,CAAC,EACZ,CAAC,CAEV,CAAC,CAED,cAAe,CAAAzE,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}